/*
   This file has been generated by IDA.
   It contains local type definitions from
   the type library 'LEV_SIM4'
*/

#define __int8 char
#define __int16 short
#define __int32 int
#define __int64 long long

struct _IO_FILE;
struct _IO_marker;

/* 1 */
struct __attribute__((aligned(8))) Elf64_Sym
{
  unsigned __int32 st_name;
  unsigned __int8 st_info;
  unsigned __int8 st_other;
  unsigned __int16 st_shndx;
  unsigned __int64 st_value;
  unsigned __int64 st_size;
};

/* 2 */
struct Elf64_Rela
{
  unsigned __int64 r_offset;
  unsigned __int64 r_info;
  __int64 r_addend;
};

/* 3 */
struct Elf64_Dyn
{
  unsigned __int64 d_tag;
  unsigned __int64 d_un;
};

/* 4 */
struct __attribute__((aligned(4))) Elf64_Verneed
{
  unsigned __int16 vn_version;
  unsigned __int16 vn_cnt;
  unsigned __int32 vn_file;
  unsigned __int32 vn_aux;
  unsigned __int32 vn_next;
};

/* 5 */
struct __attribute__((aligned(4))) Elf64_Vernaux
{
  unsigned __int32 vna_hash;
  unsigned __int16 vna_flags;
  unsigned __int16 vna_other;
  unsigned __int32 vna_name;
  unsigned __int32 vna_next;
};

/* 6 */
typedef unsigned __int64 sizetype;

/* 7 */
struct __attribute__((aligned(8))) ConfigDataType
{
  double version;
  char metaDataFileName[96];
  int cpuSchedCode;
  int quantumCycles;
  bool memDisplay;
  int memAvailable;
  int procCycleRate;
  int ioCycleRate;
  int logToCode;
  char logToFileName[96];
};

/* 8 */
typedef ConfigDataType ConfigDataType_0;

/* 9 */
struct OpCodeType
{
  int pid;
  char command[5];
  char inOutArg[5];
  char strArg1[15];
  int intArg2;
  int intArg3;
  double opEndTime;
  OpCodeType *nextNode;
};

/* 10 */
typedef OpCodeType OpCodeType_0;

/* 11 */
enum $5BB846206B2F0B0C60FBD6E1E47F5D9D : __int32
{
  MIN_NUM_ARGS = 0x3,
  LAST_FOUR_LETTERS = 0x4,
};

/* 12 */
struct CmdLineDataStruct
{
  bool programRunFlag;
  bool configDisplayFlag;
  bool mdDisplayFlag;
  bool runSimFlag;
  char fileName[64];
};

/* 13 */
typedef CmdLineDataStruct CmdLineData;

/* 14 */
typedef unsigned __int64 size_t;

/* 15 */
typedef __int64 __off_t;

/* 16 */
typedef __int64 __off64_t;

/* 17 */
typedef _IO_FILE FILE;

/* 20 */
typedef void _IO_lock_t;

/* 18 */
struct _IO_FILE
{
  int _flags;
  char *_IO_read_ptr;
  char *_IO_read_end;
  char *_IO_read_base;
  char *_IO_write_base;
  char *_IO_write_ptr;
  char *_IO_write_end;
  char *_IO_buf_base;
  char *_IO_buf_end;
  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;
  _IO_marker *_markers;
  _IO_FILE *_chain;
  int _fileno;
  int _flags2;
  __off_t _old_offset;
  unsigned __int16 _cur_column;
  char _vtable_offset;
  char _shortbuf[1];
  _IO_lock_t *_lock;
  __off64_t _offset;
  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;
  size_t __pad5;
  int _mode;
  char _unused2[20];
};

/* 19 */
struct __attribute__((aligned(8))) _IO_marker
{
  _IO_marker *_next;
  _IO_FILE *_sbuf;
  int _pos;
};

/* 21 */
enum $B55A1BFD3999566F50293ED92FB2A6A3 : __int32
{
  NEW_STATE = 0x0,
  READY_STATE = 0x1,
  RUNNING_STATE = 0x2,
  BLOCKED_STATE = 0x3,
  EXIT_STATE = 0x4,
};

/* 22 */
enum InterruptMgrCode : __int32
{
  INITIALIZE_INTERRUPT_MGR = 0x0,
  CHECK_FOR_INTERRUPT = 0x1,
  SET_IO_START = 0x2,
  RESOLVE_ALL_INTERRUPTS = 0x3,
};

/* 23 */
enum $1747DC8BA72B1E25846A5F7B979F7ECB : __int32
{
  INITIALIZE_REPORT_SYSTEM = 0x0,
  ADD_REPORT_ITEM = 0x1,
  COMPLETE_REPORT = 0x2,
};

/* 24 */
struct ReportNode
{
  char dispString[96];
  ReportNode *nextNode;
};

/* 25 */
typedef ReportNode ReportNode_0;

/* 26 */
struct MemNodeType
{
  int physicalStart;
  int physicalStop;
  int memBlockState;
  int processNumber;
  int logicalStart;
  int logicalStop;
  MemNodeType *nextNode;
};

/* 27 */
typedef MemNodeType MemNodeType_0;

/* 28 */
struct PcbNodeType
{
  int pid;
  int state;
  int timeRemaining;
  double startTime;
  bool quantumTimeOut;
  OpCodeType_0 *currentOpCode;
  OpCodeType_0 *opCodeList;
  MemNodeType_0 *memList;
  PcbNodeType *nextNode;
};

/* 29 */
typedef PcbNodeType PcbNodeType_0;

/* 30 */
enum $AE41E67028493226C9E3A67E58B146DC : __int32
{
  CPU_SCHED_SJF_N_CODE = 0x0,
  CPU_SCHED_SRTF_P_CODE = 0x1,
  CPU_SCHED_FCFS_P_CODE = 0x2,
  CPU_SCHED_RR_P_CODE = 0x3,
  CPU_SCHED_FCFS_N_CODE = 0x4,
  LOGTO_MONITOR_CODE = 0x5,
  LOGTO_FILE_CODE = 0x6,
  LOGTO_BOTH_CODE = 0x7,
  NON_PREEMPTIVE_CODE = 0x8,
  PREEMPTIVE_CODE = 0x9,
};

/* 31 */
enum $71337CE4BBB0564760CA3202ABC4928B : __int32
{
  ZERO_TIMER = 0x0,
  LAP_TIMER = 0x1,
  STOP_TIMER = 0x2,
};

/* 32 */
enum $97C58CD0AFB8608C02A3CCC6E688BBF1 : __int32
{
  ALL_PROCESSES_IN_EXIT = 0xFFFFFDA2,
  ALL_PROCESSES_IN_WAIT = 0xFFFFFE07,
};

/* 33 */
enum $51E1F2F3CF90B36C3C4654F94BE3E022 : __int32
{
  NO_PROCESS_ID = 0xFFFFFFFF,
  LOGICAL_ZERO = 0x0,
  OPEN_MEMORY = 0x1,
  USED_MEMORY = 0x2,
};

/* 34 */
enum $BB004130E6AF1E9D9996EBA253D76792 : __int32
{
  INITIALIZE_INTERRUPT_MGR_0 = 0x0,
  CHECK_FOR_INTERRUPT_0 = 0x1,
  SET_IO_START_0 = 0x2,
  RESOLVE_ALL_INTERRUPTS_0 = 0x3,
};

/* 35 */
enum OpCodeMessages : __int32
{
  BAD_ARG_VAL = 0xFFFFFFFF,
  NO_ACCESS_ERR = 0x0,
  MD_FILE_ACCESS_ERR = 0x1,
  MD_CORRUPT_DESCRIPTOR_ERR = 0x2,
  OPCMD_ACCESS_ERR = 0x3,
  CORRUPT_OPCMD_ERR = 0x4,
  CORRUPT_OPCMD_ARG_ERR = 0x5,
  UNBALANCED_START_END_ERR = 0x6,
  COMPLETE_OPCMD_FOUND_MSG = 0x7,
  LAST_OPCMD_FOUND_MSG = 0x8,
};

/* 36 */
enum ConfigCodeMessages : __int32
{
  CFG_FILE_ACCESS_ERR = 0x0,
  CFG_CORRUPT_DESCRIPTOR_ERR = 0x1,
  CFG_DATA_OUT_OF_RANGE_ERR = 0x2,
  CFG_CORRUPT_PROMPT_ERR = 0x3,
  CFG_VERSION_CODE = 0x4,
  CFG_MD_FILE_NAME_CODE = 0x5,
  CFG_CPU_SCHED_CODE = 0x6,
  CFG_QUANT_CYCLES_CODE = 0x7,
  CFG_MEM_DISPLAY_CODE = 0x8,
  CFG_MEM_AVAILABLE_CODE = 0x9,
  CFG_PROC_CYCLES_CODE = 0xA,
  CFG_IO_CYCLES_CODE = 0xB,
  CFG_LOG_TO_CODE = 0xC,
  CFG_LOG_FILE_NAME_CODE = 0xD,
};

/* 37 */
enum ConfigDataCodes : __int32
{
  CPU_SCHED_SJF_N_CODE_0 = 0x0,
  CPU_SCHED_SRTF_P_CODE_0 = 0x1,
  CPU_SCHED_FCFS_P_CODE_0 = 0x2,
  CPU_SCHED_RR_P_CODE_0 = 0x3,
  CPU_SCHED_FCFS_N_CODE_0 = 0x4,
  LOGTO_MONITOR_CODE_0 = 0x5,
  LOGTO_FILE_CODE_0 = 0x6,
  LOGTO_BOTH_CODE_0 = 0x7,
  NON_PREEMPTIVE_CODE_0 = 0x8,
  PREEMPTIVE_CODE_0 = 0x9,
};

/* 38 */
typedef __int64 __time_t;

/* 39 */
typedef __int64 __suseconds_t;

/* 40 */
struct timeval
{
  __time_t tv_sec;
  __suseconds_t tv_usec;
};

/* 41 */
struct __va_list_tag
{
  unsigned int gp_offset;
  unsigned int fp_offset;
  void *overflow_arg_area;
  void *reg_save_area;
};

/* 42 */
typedef __va_list_tag gcc_va_list[1];

/* 43 */
union __attribute__((aligned(8))) __m64 {
  unsigned __int64 m64_u64;
  float m64_f32[2];
  __int8 m64_i8[8];
  __int16 m64_i16[4];
  __int32 m64_i32[2];
  __int64 m64_i64;
  unsigned __int8 m64_u8[8];
  unsigned __int16 m64_u16[4];
  unsigned __int32 m64_u32[2];
};

/* 44 */
union __attribute__((aligned(16))) __m128 {
  float m128_f32[4];
  unsigned __int64 m128_u64[2];
  __int8 m128_i8[16];
  __int16 m128_i16[8];
  __int32 m128_i32[4];
  __int64 m128_i64[2];
  unsigned __int8 m128_u8[16];
  unsigned __int16 m128_u16[8];
  unsigned __int32 m128_u32[4];
};

/* 45 */
struct __m128d
{
  double m128d_f64[2];
};

/* 46 */
union __attribute__((aligned(16))) __m128i {
  __int8 m128i_i8[16];
  __int16 m128i_i16[8];
  __int32 m128i_i32[4];
  __int64 m128i_i64[2];
  unsigned __int8 m128i_u8[16];
  unsigned __int16 m128i_u16[8];
  unsigned __int32 m128i_u32[4];
  unsigned __int64 m128i_u64[2];
};

/* 47 */
union __attribute__((aligned(32))) __m256 {
  float m256_f32[8];
};

/* 48 */
union __attribute__((aligned(32))) __m256d {
  double m256d_f64[4];
};

/* 49 */
union __attribute__((aligned(32))) __m256i {
  __int8 m256i_i8[32];
  __int16 m256i_i16[16];
  __int32 m256i_i32[8];
  __int64 m256i_i64[4];
  unsigned __int8 m256i_u8[32];
  unsigned __int16 m256i_u16[16];
  unsigned __int32 m256i_u32[8];
  unsigned __int64 m256i_u64[4];
};

/* 50 */
union __attribute__((aligned(64))) __m512 {
  float m512_f32[16];
};

/* 51 */
union __attribute__((aligned(64))) __m512d {
  double m512d_f64[8];
};

/* 52 */
union __attribute__((aligned(64))) __m512i {
  __int8 m512i_i8[64];
  __int16 m512i_i16[32];
  __int32 m512i_i32[16];
  __int64 m512i_i64[8];
  unsigned __int8 m512i_u8[64];
  unsigned __int16 m512i_u16[32];
  unsigned __int32 m512i_u32[16];
  unsigned __int64 m512i_u64[8];
};
